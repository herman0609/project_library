#ifndef BOOK_MANAGEMENT_GUARD__H
#define BOOK_MANAGEMENT_GUARD__H

#include <stdio.h>

/*You can extend the structs (Book and BookList) defined in this head file;
  However, you may not change the function prototypes.
  You are also free to add additional head files and data structures as needed.
*/


typedef struct _Book {
    unsigned int id; //Book ID     *because if it was *title it
    char *title;//comma separated list of authors     can't be read by fscanf
    char *authors;
    unsigned int year; // year of publication
    unsigned int copies; //number of copies the library has
    struct _Book *next; //pointer to the next book element
} Book;

typedef struct User {
    char *name;
    char *user_name;
    char *password;
    struct User *next;
} User;

typedef struct Borrow {
    char *borrower;
    unsigned int id;
    char *title;
    char *authors;
    unsigned int year;
    struct Borrow *next;
} Borrow;

typedef struct _BookList {
    Book *list; // pointer to a list of struct Book.
    unsigned int length; // number of elements in the (Book*) List
} BookList;

Book *head;

//saves the database of books in the specified file
//returns 0 if books were stored correctly, or an error code otherwise
int store_books(FILE *file, Book *head);

//like the function, 'store_books', it saves the database of books in the specified file
int store_users(FILE *file, User *head);

int store_borrow(FILE *file, Borrow *head);

//loads the database of books from the specified file
//the file must have been generated by a previous call to store_books()
//returns 0 if books were loaded correctly, or an error code otherwise
int load_books(FILE *file, Book *head);

//like the function 'load_books', it loads the database of books from the specified file
int load_users(FILE *file, User *head);

int load_borrow(FILE *file, Borrow *head);

//adds a book to the ones available to the library
//returns 0 if the book could be added, or an error code otherwise
int add_book(Book book, Book *head);

//removes a book from the library
//returns 0 if the book could be successfully removed, or an error code otherwise.
int remove_book(Book book, Book *head);

int change_book(Book book, Book *head);
//finds books with a given title.
//returns a BookList structure, where the field "list" is a list of books, or null if no book with the
//provided title can be found. The length of the list is also recorded in the returned structure, with 0 in case
//list is the NULL pointer.
BookList find_book_by_title(const char *title, Book *head);

//finds books with the given authors.
//returns a Booklist structure, where the field "list" is a newly allocated list of books, or null if no book with the
//provided title can be found. The length of the list is also recorded in the returned structure, with 0 in case
//list is the NULL pointer.
BookList find_book_by_author(const char *author, Book *head);

//finds books published in the given year.
//returns a Booklist structure, where the field "list" is a list of books, or null if no book with the
//provided title can be found. The length of the list is also recorded in the returned structure, with 0 in case
//list is the NULL pointer.
BookList find_book_by_year(unsigned int year, Book *head);

int OutputOption(char *input);

int isInteger(char *input);

#endif
